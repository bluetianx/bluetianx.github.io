<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>深入理解Aspnet Core之Identity(5)</title>
      <link href="/2018/04/22/Identity5/"/>
      <url>/2018/04/22/Identity5/</url>
      <content type="html"><![CDATA[<h3 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h3><p>本篇我将会介绍验证用户的机制当账户被创建的时候，同样 这个过程主要有IUserValidator这个接口来实现的，和密码验证一样Identity同样也内置已经实现好的账户验证。账户验证的比较简单，我会先介绍内置的IUserValidator的使用，然后会简单介绍一些源代码，最后会演示怎实现一个自定义的IUserValidator。</p><hr><h3 id="使用内置的IUserValidator来定义用户户名的规则"><a href="#使用内置的IUserValidator来定义用户户名的规则" class="headerlink" title="使用内置的IUserValidator来定义用户户名的规则"></a>使用内置的IUserValidator来定义用户户名的规则</h3><p>用户名验证规则是在Startup类 里面进行配置的，通过用IdentityOptions.User进行配置，IdentityOptions.User是UserOptions类的实例。UserOptions属性的列表如下：</p><ul><li>AllowedUserNameCharacters ：类型string 代表用户创建用户名可以使用的字符，默认为：abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789-._@+</li><li>RequireUniqueEmail ：类型 bool，true 代表创建账户使用的email必须是没有被用过的。</li></ul><p>现在Startup类中的ConfigureServices方法配置用户名验证规则，代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">public void ConfigureServices(IServiceCollection services)</span><br><span class="line">        &#123;</span><br><span class="line">            //注入自定义密码验证类</span><br><span class="line">            services.AddTransient&lt;IPasswordValidator&lt;AppUser&gt;,</span><br><span class="line">                CustomPasswordValidator&gt;();</span><br><span class="line">            </span><br><span class="line">            services.AddDbContext&lt;AppIdentityDbContext&gt;(options =&gt;</span><br><span class="line">                options.UseSqlServer(</span><br><span class="line">                    Configuration[&quot;Data:AppStoreIdentity:ConnectionString&quot;]));</span><br><span class="line">            //配置</span><br><span class="line">            services.AddIdentity&lt;AppUser, IdentityRole&gt;(opts =&gt; &#123;</span><br><span class="line">                    //配置用户名验证规则</span><br><span class="line">                    opts.User.RequireUniqueEmail = true;</span><br><span class="line">                    opts.User.AllowedUserNameCharacters = &quot;testabc&quot;;</span><br><span class="line">                    //配置密码强度</span><br><span class="line">                    opts.Password.RequiredLength = 6;</span><br><span class="line">                    opts.Password.RequireNonAlphanumeric = false;</span><br><span class="line">                    opts.Password.RequireLowercase = false;</span><br><span class="line">                    opts.Password.RequireUppercase = false;</span><br><span class="line">                    opts.Password.RequireDigit = false;</span><br><span class="line">                &#125;).AddEntityFrameworkStores&lt;AppIdentityDbContext&gt;()</span><br><span class="line">                .AddDefaultTokenProviders();</span><br><span class="line">            services.AddMvc();</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></p><ul><li>当用户创建账户时候要求email必须是未使用过的，用户名仅包含 testabc 这里面的字符。<br>我们启动网站，创建一个账户，看一下配置是否生效，结果如下图：<br><img src="1.png" alt="avatar"></li></ul><hr><h3 id="自定义用户验证"><a href="#自定义用户验证" class="headerlink" title="自定义用户验证"></a>自定义用户验证</h3><ul><li><p>虽然内置的用户验证可以满足很多场景，但是假如我们要求创建的拥护都要包含<a href="mailto:test@163.com" target="_blank" rel="noopener">test@163.com</a>这个后缀时，我们就需要自定义一个用户验证类了。</p><h2 id="IUserValidator接口的源代码"><a href="#IUserValidator接口的源代码" class="headerlink" title="IUserValidator接口的源代码"></a>IUserValidator接口的源代码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">// Copyright (c) .NET Foundation. All rights reserved.</span><br><span class="line">// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.</span><br><span class="line"></span><br><span class="line">using System.Threading;</span><br><span class="line">using System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line">namespace Microsoft.AspNetCore.Identity</span><br><span class="line">&#123;</span><br><span class="line">    /// &lt;summary&gt;</span><br><span class="line">    /// Provides an abstraction for user validation.</span><br><span class="line">    /// &lt;/summary&gt;</span><br><span class="line">    /// &lt;typeparam name=&quot;TUser&quot;&gt;The type encapsulating a user.&lt;/typeparam&gt;</span><br><span class="line">    public interface IUserValidator&lt;TUser&gt; where TUser : class</span><br><span class="line">    &#123;</span><br><span class="line">        /// &lt;summary&gt;</span><br><span class="line">        /// Validates the specified &lt;paramref name=&quot;user&quot;/&gt; as an asynchronous operation.</span><br><span class="line">        /// &lt;/summary&gt;</span><br><span class="line">        /// &lt;param name=&quot;manager&quot;&gt;The &lt;see cref=&quot;UserManager&#123;TUser&#125;&quot;/&gt; that can be used to retrieve user properties.&lt;/param&gt;</span><br><span class="line">        /// &lt;param name=&quot;user&quot;&gt;The user to validate.&lt;/param&gt;</span><br><span class="line">        /// &lt;returns&gt;The &lt;see cref=&quot;Task&quot;/&gt; that represents the asynchronous operation, containing the &lt;see cref=&quot;IdentityResult&quot;/&gt; of the validation operation.&lt;/returns&gt;</span><br><span class="line">        Task&lt;IdentityResult&gt; ValidateAsync(UserManager&lt;TUser&gt; manager, TUser user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>该接口很简单就包含了 ValidateAsync方法，用于验证用户名，</p><h2 id="实现IUserValidator-接口"><a href="#实现IUserValidator-接口" class="headerlink" title="实现IUserValidator 接口"></a>实现IUserValidator 接口</h2><p>在Infrastructure文件夹中创建一个CustomUserValidator C#文件，代码如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"> using System.Threading.Tasks;</span><br><span class="line">using DemoUser.Models;</span><br><span class="line">using Microsoft.AspNetCore.Identity;</span><br><span class="line"></span><br><span class="line">namespace DemoUser.Infrastructure</span><br><span class="line">&#123;</span><br><span class="line">    public class CustomUserValidator</span><br><span class="line">    &#123;</span><br><span class="line">        public Task&lt;IdentityResult&gt; ValidateAsync(UserManager&lt;AppUser&gt; manager,</span><br><span class="line">            AppUser user) &#123;</span><br><span class="line">            if (user.Email.ToLower().EndsWith(&quot;test@163.com&quot;)) &#123;</span><br><span class="line">                return Task.FromResult(IdentityResult.Success);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                return Task.FromResult(IdentityResult.Failed(new IdentityError &#123;</span><br><span class="line">                    Code = &quot;EmailError&quot;,</span><br><span class="line">                    Description = &quot;仅仅可以包含test@163.com后缀&quot;</span><br><span class="line">                &#125;));</span><br><span class="line">            &#125; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>我们在Startup类中的ConfigureServices 注入我们自定义的CustomUserValidator类，代码如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">public void ConfigureServices(IServiceCollection services)</span><br><span class="line">       &#123;</span><br><span class="line">           //注入自定义用户名验证类</span><br><span class="line">           services.AddTransient&lt;IUserValidator&lt;AppUser&gt;,</span><br><span class="line">               CustomUserValidator&gt;();</span><br><span class="line"></span><br><span class="line">           //注入自定义密码验证类</span><br><span class="line">           services.AddTransient&lt;IPasswordValidator&lt;AppUser&gt;,</span><br><span class="line">               CustomPasswordValidator&gt;();</span><br><span class="line">           </span><br><span class="line">           services.AddDbContext&lt;AppIdentityDbContext&gt;(options =&gt;</span><br><span class="line">               options.UseSqlServer(</span><br><span class="line">                   Configuration[&quot;Data:AppStoreIdentity:ConnectionString&quot;]));</span><br><span class="line">           //配置</span><br><span class="line">           services.AddIdentity&lt;AppUser, IdentityRole&gt;(opts =&gt; &#123;</span><br><span class="line">                   //配置用户名验证规则</span><br><span class="line">                   opts.User.RequireUniqueEmail = true;</span><br><span class="line">                   opts.User.AllowedUserNameCharacters = &quot;testabc&quot;;</span><br><span class="line">                   //配置密码强度</span><br><span class="line">                   opts.Password.RequiredLength = 6;</span><br><span class="line">                   opts.Password.RequireNonAlphanumeric = false;</span><br><span class="line">                   opts.Password.RequireLowercase = false;</span><br><span class="line">                   opts.Password.RequireUppercase = false;</span><br><span class="line">                   opts.Password.RequireDigit = false;</span><br><span class="line">               &#125;).AddEntityFrameworkStores&lt;AppIdentityDbContext&gt;()</span><br><span class="line">               .AddDefaultTokenProviders();</span><br><span class="line">           services.AddMvc();</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure></li></ul><p>这样我们就成功替换掉内置的用户验证类了。重新运行程序就可以了。</p><h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><p>这篇介绍了IUserValidator的使用方法，以及如何自定义我们自己的规则。从下一篇开始我打算开始介绍如何用Identity来对用户进行验证和授权。</p></li></ul>]]></content>
      
      <categories>
          
          <category> Asp.net Core </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Asp.net core Identity </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>深入理解Aspnet Core之Identity(4)</title>
      <link href="/2018/04/16/Identity4/"/>
      <url>/2018/04/16/Identity4/</url>
      <content type="html"><![CDATA[<h3 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h3><pre><code>之前简单介绍了Asp.net core 的初步的使用，本篇我打算给大家介绍一下Identity的架构，让大家对Identity有一个总体的理解和认识。</code></pre><hr><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>Identity的基本的架构图如下：<br><img src="arc.png" alt="avatar"></p><ul><li>Asp.net core Identity 是由一系列名为managers 和 stores 类组成的。manager层是主要identity架构的最高层，开发者主要在应用开发中用来对Identity User 进行管理，比如CRUD等操作。Stores 层相对于manager层在架构图中属于较低层次的类，主要用于持久化 用户（user）、角色（role）等信息，同时store类遵循了 <a href="http://deviq.com/repository-pattern" target="_blank" rel="noopener">仓储模式</a>.manager层和store层 是完全解耦的。意味着你可以自己重写store的持久化机制并且还不用修改上层的代码。</li><li>假如你打算创建自己的 存储提供器（storage provider），那么你需要创建上面架构图中的绿色和灰色层的部分，你不需要重写蓝色层的部分。当你为你提供的user创建一个UserManager 或者 RoleManager示例的时，需要提供一个 store类作为参数，这样就为你加入自己定义的代码提供了机会。</li></ul><hr><h3 id="Asp-net-core-Identity-存储数据（stores-data）类型"><a href="#Asp-net-core-Identity-存储数据（stores-data）类型" class="headerlink" title="Asp.net core Identity 存储数据（stores data）类型"></a>Asp.net core Identity 存储数据（stores data）类型</h3><h2 id="User"><a href="#User" class="headerlink" title="User"></a>User</h2><p>代表了网站的注册用户，内置的Identity User 能被扩展根据自身的需要。不需要自己直接去实现。<br>示例代码如下：</p><pre><code class="C#">using Microsoft.AspNetCore.Identity;namespace DemoUser.Models{    public class AppUser:IdentityUser    {    }}</code></pre><h2 id="User-Claims"><a href="#User-Claims" class="headerlink" title="User Claims"></a>User Claims</h2><p>User Claims 是关于用户的声明的集合，它比起传统的通过角色的机制更加强大，可以描述更多的用户信息。</p><h2 id="User-Logins"><a href="#User-Logins" class="headerlink" title="User Logins"></a>User Logins</h2><p>是关于外部认证用户提供者（external authentication provider）（比如：谷歌、新浪等）的信息</p><h2 id="Roles"><a href="#Roles" class="headerlink" title="Roles"></a>Roles</h2><p>代表了网站的授权组，包含角色ID ROleID、角色名 RoleName </p><hr><h3 id="数据访问层"><a href="#数据访问层" class="headerlink" title="数据访问层"></a>数据访问层</h3><p>数据访问层用于保存网站的用户账户数据到数据源。我们可以自定义开发这一层，数据访问层包含了多个存储类型比如User Storage、Role Storage。你可以根据自己应用网站的设计需要来实现这些存储类，假如你的网站不需要角色类型，那么就不需要实现Role Storage。</p><hr><h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><p>这篇简单介绍了一下Identity的架构设计。后续我打算自定义实现架构图中的绿色和灰色部分，到那时候我们在深入讨论一下如何实现。下一篇我将会分享关于 用户验证，包括当用户创建时候怎么验证用户名和email地址。</p>]]></content>
      
      <categories>
          
          <category> Asp.net Core </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Asp.net core Identity </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>深入理解Aspnet Core之Identity(3)</title>
      <link href="/2018/04/07/Identity3/"/>
      <url>/2018/04/07/Identity3/</url>
      <content type="html"><![CDATA[<h3 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h3><p> 账户管理一个比较常见的功能就是密码强度策略，Identity已经内置了一个通用的可配置的策略，我们一般情况下可以直接拿来用即可。本篇我会介绍一些<br>Identity内置的密码策略类：PasswordValidator，并且简单介绍一下源码。最好我们还会自定义一个密码策略类的实现。</p><hr><h3 id="密码强度配置"><a href="#密码强度配置" class="headerlink" title="密码强度配置"></a>密码强度配置</h3><p>我们需要在startup类里面配置，密码强度策略。代码如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public void ConfigureServices(IServiceCollection services)</span><br><span class="line">        &#123;</span><br><span class="line">            services.AddDbContext&lt;AppIdentityDbContext&gt;(options =&gt;</span><br><span class="line">                options.UseSqlServer(</span><br><span class="line">                    Configuration[&quot;Data:AppStoreIdentity:ConnectionString&quot;]));</span><br><span class="line">            //配置密码强度</span><br><span class="line">            services.AddIdentity&lt;AppUser, IdentityRole&gt;(opts =&gt; &#123;</span><br><span class="line">                    opts.Password.RequiredLength = 6;</span><br><span class="line">                    opts.Password.RequireNonAlphanumeric = false;</span><br><span class="line">                    opts.Password.RequireLowercase = false;</span><br><span class="line">                    opts.Password.RequireUppercase = false;</span><br><span class="line">                    opts.Password.RequireDigit = false;</span><br><span class="line">                &#125;).AddEntityFrameworkStores&lt;AppIdentityDbContext&gt;()</span><br><span class="line">                .AddDefaultTokenProviders();</span><br><span class="line">            services.AddMvc();</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></p><p>这个 AddIdentity 方法接受一个 IdentityOptions 对象参数，这个对象包含了所有能用于配置Identity系统的配置项，其中就包含了密码强度的配置。PassWord属性包含了可用于密码强度的配置项，其中包括：</p><ul><li>RequiredLength ：这个属性用于指明密码的最小长度，类型 int</li><li>RequireNonAlphanumeric ：类型：bool，true代表密码至少包含一个非字母或者数字的字符，比如 ！@#</li><li>RequireLowercase ：类型bool，true代表密码至少包含一个小写字母</li><li>RequireUppercase ：类型 bool，true 代表密码至少包含一个大写字母</li><li>RequireDigit ：类型 bool，true 代表密码至少包含一个数字<br>这里我配置的密码强度是不少于六位的字符即可。<h3 id="IdentityOptions-类可用于配置的属性"><a href="#IdentityOptions-类可用于配置的属性" class="headerlink" title="IdentityOptions 类可用于配置的属性"></a>IdentityOptions 类可用于配置的属性</h3>在这里我们把IdentityOptions对应的源代码展现给大家，让大家了解一下哪些可用于配置Identity，<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">/// &lt;summary&gt;</span><br><span class="line">    /// Represents all the options you can use to configure the identity system.</span><br><span class="line">    /// &lt;/summary&gt;</span><br><span class="line">    public class IdentityOptions</span><br><span class="line">    &#123;</span><br><span class="line">        /// &lt;summary&gt;</span><br><span class="line">        /// Gets or sets the &lt;see cref=&quot;ClaimsIdentityOptions&quot;/&gt; for the identity system.</span><br><span class="line">        /// &lt;/summary&gt;</span><br><span class="line">        /// &lt;value&gt;</span><br><span class="line">        /// The &lt;see cref=&quot;ClaimsIdentityOptions&quot;/&gt; for the identity system.</span><br><span class="line">        /// &lt;/value&gt;</span><br><span class="line">        public ClaimsIdentityOptions ClaimsIdentity &#123; get; set; &#125; = new ClaimsIdentityOptions();</span><br><span class="line"></span><br><span class="line">        /// &lt;summary&gt;</span><br><span class="line">        /// Gets or sets the &lt;see cref=&quot;UserOptions&quot;/&gt; for the identity system.</span><br><span class="line">        /// &lt;/summary&gt;</span><br><span class="line">        /// &lt;value&gt;</span><br><span class="line">        /// The &lt;see cref=&quot;UserOptions&quot;/&gt; for the identity system.</span><br><span class="line">        /// &lt;/value&gt;</span><br><span class="line">        public UserOptions User &#123; get; set; &#125; = new UserOptions();</span><br><span class="line"></span><br><span class="line">        /// &lt;summary&gt;</span><br><span class="line">        /// Gets or sets the &lt;see cref=&quot;PasswordOptions&quot;/&gt; for the identity system.</span><br><span class="line">        /// &lt;/summary&gt;</span><br><span class="line">        /// &lt;value&gt;</span><br><span class="line">        /// The &lt;see cref=&quot;PasswordOptions&quot;/&gt; for the identity system.</span><br><span class="line">        /// &lt;/value&gt;</span><br><span class="line">        public PasswordOptions Password &#123; get; set; &#125; = new PasswordOptions();</span><br><span class="line"></span><br><span class="line">        /// &lt;summary&gt;</span><br><span class="line">        /// Gets or sets the &lt;see cref=&quot;LockoutOptions&quot;/&gt; for the identity system.</span><br><span class="line">        /// &lt;/summary&gt;</span><br><span class="line">        /// &lt;value&gt;</span><br><span class="line">        /// The &lt;see cref=&quot;LockoutOptions&quot;/&gt; for the identity system.</span><br><span class="line">        /// &lt;/value&gt;</span><br><span class="line">        public LockoutOptions Lockout &#123; get; set; &#125; = new LockoutOptions();</span><br><span class="line"></span><br><span class="line">        /// &lt;summary&gt;</span><br><span class="line">        /// Gets or sets the &lt;see cref=&quot;SignInOptions&quot;/&gt; for the identity system.</span><br><span class="line">        /// &lt;/summary&gt;</span><br><span class="line">        /// &lt;value&gt;</span><br><span class="line">        /// The &lt;see cref=&quot;SignInOptions&quot;/&gt; for the identity system.</span><br><span class="line">        /// &lt;/value&gt;</span><br><span class="line">        public SignInOptions SignIn &#123; get; set; &#125; = new SignInOptions();</span><br><span class="line"></span><br><span class="line">        /// &lt;summary&gt;</span><br><span class="line">        /// Gets or sets the &lt;see cref=&quot;TokenOptions&quot;/&gt; for the identity system.</span><br><span class="line">        /// &lt;/summary&gt;</span><br><span class="line">        /// &lt;value&gt;</span><br><span class="line">        /// The &lt;see cref=&quot;TokenOptions&quot;/&gt; for the identity system.</span><br><span class="line">        /// &lt;/value&gt;</span><br><span class="line">        public TokenOptions Tokens &#123; get; set; &#125; = new TokenOptions();</span><br><span class="line"></span><br><span class="line">        /// &lt;summary&gt;</span><br><span class="line">        /// Gets or sets the &lt;see cref=&quot;StoreOptions&quot;/&gt; for the identity system.</span><br><span class="line">        /// &lt;/summary&gt;</span><br><span class="line">        /// &lt;value&gt;</span><br><span class="line">        /// The &lt;see cref=&quot;StoreOptions&quot;/&gt; for the identity system.</span><br><span class="line">        /// &lt;/value&gt;</span><br><span class="line">        public StoreOptions Stores &#123; get; set; &#125; = new StoreOptions();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul><p>我们除了可以用 IdentityOptions 配置密码策略，还可以用于配置 持久化配置StoreOptions，令牌配置TokenOption等；</p><hr><h3 id="自定义实现IPasswordValidator"><a href="#自定义实现IPasswordValidator" class="headerlink" title="自定义实现IPasswordValidator"></a>自定义实现IPasswordValidator</h3><ul><li>我们首先看一下 IPasswordValidator 接口的定义；</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">// Copyright (c) .NET Foundation. All rights reserved.</span><br><span class="line">// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.</span><br><span class="line"></span><br><span class="line">using System.Threading;</span><br><span class="line">using System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line">namespace Microsoft.AspNetCore.Identity</span><br><span class="line">&#123;</span><br><span class="line">    /// &lt;summary&gt;</span><br><span class="line">    /// Provides an abstraction for validating passwords.</span><br><span class="line">    /// &lt;/summary&gt;</span><br><span class="line">    /// &lt;typeparam name=&quot;TUser&quot;&gt;The type that represents a user.&lt;/typeparam&gt;</span><br><span class="line">    public interface IPasswordValidator&lt;TUser&gt; where TUser : class</span><br><span class="line">    &#123;</span><br><span class="line">        /// &lt;summary&gt;</span><br><span class="line">        /// Validates a password as an asynchronous operation.</span><br><span class="line">        /// &lt;/summary&gt;</span><br><span class="line">        /// &lt;param name=&quot;manager&quot;&gt;The &lt;see cref=&quot;UserManager&#123;TUser&#125;&quot;/&gt; to retrieve the &lt;paramref name=&quot;user&quot;/&gt; properties from.&lt;/param&gt;</span><br><span class="line">        /// &lt;param name=&quot;user&quot;&gt;The user whose password should be validated.&lt;/param&gt;</span><br><span class="line">        /// &lt;param name=&quot;password&quot;&gt;The password supplied for validation&lt;/param&gt;</span><br><span class="line">        /// &lt;returns&gt;The task object representing the asynchronous operation.&lt;/returns&gt;</span><br><span class="line">        Task&lt;IdentityResult&gt; ValidateAsync(UserManager&lt;TUser&gt; manager, TUser user, string password);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个接口接受一个泛型T，这个T是应用指定的用户类User，这里我们是 AppUser类。这个接口包含类一个方法 ValidateAsync，这是一个异步方法，用于验证密码是否符合策略。这个方法返回 IdentityResult 类，假如验证没有问题，你可以用静态的IdentityResult.Success属性返回该对象，反之，用Failed静态属性返回。</p><ul><li>现在我们去了解一下IPasswordValidator接口的默认实现，先附上源代码<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line">// Copyright (c) .NET Foundation. All rights reserved.</span><br><span class="line">// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.</span><br><span class="line"></span><br><span class="line">using System;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using System.Linq;</span><br><span class="line">using System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line">namespace Microsoft.AspNetCore.Identity</span><br><span class="line">&#123;</span><br><span class="line">    /// &lt;summary&gt;</span><br><span class="line">    /// Provides the default password policy for Identity.</span><br><span class="line">    /// &lt;/summary&gt;</span><br><span class="line">    /// &lt;typeparam name=&quot;TUser&quot;&gt;The type that represents a user.&lt;/typeparam&gt;</span><br><span class="line">    public class PasswordValidator&lt;TUser&gt; : IPasswordValidator&lt;TUser&gt; where TUser : class</span><br><span class="line">    &#123;</span><br><span class="line">        /// &lt;summary&gt;</span><br><span class="line">        /// Constructions a new instance of &lt;see cref=&quot;PasswordValidator&#123;TUser&#125;&quot;/&gt;.</span><br><span class="line">        /// &lt;/summary&gt;</span><br><span class="line">        /// &lt;param name=&quot;errors&quot;&gt;The &lt;see cref=&quot;IdentityErrorDescriber&quot;/&gt; to retrieve error text from.&lt;/param&gt;</span><br><span class="line">        public PasswordValidator(IdentityErrorDescriber errors = null)</span><br><span class="line">        &#123;</span><br><span class="line">            Describer = errors ?? new IdentityErrorDescriber();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        /// &lt;summary&gt;</span><br><span class="line">        /// Gets the &lt;see cref=&quot;IdentityErrorDescriber&quot;/&gt; used to supply error text.</span><br><span class="line">        /// &lt;/summary&gt;</span><br><span class="line">        /// &lt;value&gt;The &lt;see cref=&quot;IdentityErrorDescriber&quot;/&gt; used to supply error text.&lt;/value&gt;</span><br><span class="line">        public IdentityErrorDescriber Describer &#123; get; private set; &#125;</span><br><span class="line"></span><br><span class="line">        /// &lt;summary&gt;</span><br><span class="line">        /// Validates a password as an asynchronous operation.</span><br><span class="line">        /// &lt;/summary&gt;</span><br><span class="line">        /// &lt;param name=&quot;manager&quot;&gt;The &lt;see cref=&quot;UserManager&#123;TUser&#125;&quot;/&gt; to retrieve the &lt;paramref name=&quot;user&quot;/&gt; properties from.&lt;/param&gt;</span><br><span class="line">        /// &lt;param name=&quot;user&quot;&gt;The user whose password should be validated.&lt;/param&gt;</span><br><span class="line">        /// &lt;param name=&quot;password&quot;&gt;The password supplied for validation&lt;/param&gt;</span><br><span class="line">        /// &lt;returns&gt;The task object representing the asynchronous operation.&lt;/returns&gt;</span><br><span class="line">        public virtual Task&lt;IdentityResult&gt; ValidateAsync(UserManager&lt;TUser&gt; manager, TUser user, string password)</span><br><span class="line">        &#123;</span><br><span class="line">            if (password == null)</span><br><span class="line">            &#123;</span><br><span class="line">                throw new ArgumentNullException(nameof(password));</span><br><span class="line">            &#125;</span><br><span class="line">            if (manager == null)</span><br><span class="line">            &#123;</span><br><span class="line">                throw new ArgumentNullException(nameof(manager));</span><br><span class="line">            &#125;</span><br><span class="line">            var errors = new List&lt;IdentityError&gt;();</span><br><span class="line">            var options = manager.Options.Password;</span><br><span class="line">            if (string.IsNullOrWhiteSpace(password) || password.Length &lt; options.RequiredLength)</span><br><span class="line">            &#123;</span><br><span class="line">                errors.Add(Describer.PasswordTooShort(options.RequiredLength));</span><br><span class="line">            &#125;</span><br><span class="line">            if (options.RequireNonAlphanumeric &amp;&amp; password.All(IsLetterOrDigit))</span><br><span class="line">            &#123;</span><br><span class="line">                errors.Add(Describer.PasswordRequiresNonAlphanumeric());</span><br><span class="line">            &#125;</span><br><span class="line">            if (options.RequireDigit &amp;&amp; !password.Any(IsDigit))</span><br><span class="line">            &#123;</span><br><span class="line">                errors.Add(Describer.PasswordRequiresDigit());</span><br><span class="line">            &#125;</span><br><span class="line">            if (options.RequireLowercase &amp;&amp; !password.Any(IsLower))</span><br><span class="line">            &#123;</span><br><span class="line">                errors.Add(Describer.PasswordRequiresLower());</span><br><span class="line">            &#125;</span><br><span class="line">            if (options.RequireUppercase &amp;&amp; !password.Any(IsUpper))</span><br><span class="line">            &#123;</span><br><span class="line">                errors.Add(Describer.PasswordRequiresUpper());</span><br><span class="line">            &#125;</span><br><span class="line">            if (options.RequiredUniqueChars &gt;= 1 &amp;&amp; password.Distinct().Count() &lt; options.RequiredUniqueChars)</span><br><span class="line">            &#123;</span><br><span class="line">                errors.Add(Describer.PasswordRequiresUniqueChars(options.RequiredUniqueChars));</span><br><span class="line">            &#125;</span><br><span class="line">            return</span><br><span class="line">                Task.FromResult(errors.Count == 0</span><br><span class="line">                    ? IdentityResult.Success</span><br><span class="line">                    : IdentityResult.Failed(errors.ToArray()));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        /// &lt;summary&gt;</span><br><span class="line">        /// Returns a flag indicating whether the supplied character is a digit.</span><br><span class="line">        /// &lt;/summary&gt;</span><br><span class="line">        /// &lt;param name=&quot;c&quot;&gt;The character to check if it is a digit.&lt;/param&gt;</span><br><span class="line">        /// &lt;returns&gt;True if the character is a digit, otherwise false.&lt;/returns&gt;</span><br><span class="line">        public virtual bool IsDigit(char c)</span><br><span class="line">        &#123;</span><br><span class="line">            return c &gt;= &apos;0&apos; &amp;&amp; c &lt;= &apos;9&apos;;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        /// &lt;summary&gt;</span><br><span class="line">        /// Returns a flag indicating whether the supplied character is a lower case ASCII letter.</span><br><span class="line">        /// &lt;/summary&gt;</span><br><span class="line">        /// &lt;param name=&quot;c&quot;&gt;The character to check if it is a lower case ASCII letter.&lt;/param&gt;</span><br><span class="line">        /// &lt;returns&gt;True if the character is a lower case ASCII letter, otherwise false.&lt;/returns&gt;</span><br><span class="line">        public virtual bool IsLower(char c)</span><br><span class="line">        &#123;</span><br><span class="line">            return c &gt;= &apos;a&apos; &amp;&amp; c &lt;= &apos;z&apos;;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        /// &lt;summary&gt;</span><br><span class="line">        /// Returns a flag indicating whether the supplied character is an upper case ASCII letter.</span><br><span class="line">        /// &lt;/summary&gt;</span><br><span class="line">        /// &lt;param name=&quot;c&quot;&gt;The character to check if it is an upper case ASCII letter.&lt;/param&gt;</span><br><span class="line">        /// &lt;returns&gt;True if the character is an upper case ASCII letter, otherwise false.&lt;/returns&gt;</span><br><span class="line">        public virtual bool IsUpper(char c)</span><br><span class="line">        &#123;</span><br><span class="line">            return c &gt;= &apos;A&apos; &amp;&amp; c &lt;= &apos;Z&apos;;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        /// &lt;summary&gt;</span><br><span class="line">        /// Returns a flag indicating whether the supplied character is an ASCII letter or digit.</span><br><span class="line">        /// &lt;/summary&gt;</span><br><span class="line">        /// &lt;param name=&quot;c&quot;&gt;The character to check if it is an ASCII letter or digit.&lt;/param&gt;</span><br><span class="line">        /// &lt;returns&gt;True if the character is an ASCII letter or digit, otherwise false.&lt;/returns&gt;</span><br><span class="line">        public virtual bool IsLetterOrDigit(char c)</span><br><span class="line">        &#123;</span><br><span class="line">            return IsUpper(c) || IsLower(c) || IsDigit(c);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>默认的实现类，除了实现了ValidateAsync方法，还有IsDigit IsLower等方法，他们对应了密码配置的属性，比如是否小写，是否大写等等…密码验证方法里面主要根据应用设置的密码强度属性来进行一次判断，代码比较好理解。</p><hr><h3 id="自定义实现密码强度验证"><a href="#自定义实现密码强度验证" class="headerlink" title="自定义实现密码强度验证"></a>自定义实现密码强度验证</h3><p>虽然内置的密码验证已经满足了大部分应用场景，但有的时候我们还是需要自定义实现一个满足自身业务需求的密码验证类。这里我给大家演示一下怎么去自定义个密码验证类去满足令人头疼业务需求。假设我们有这样一个业务需求：</p><ul><li>要求密码不能包含敏感字符：china<br>1.首先在项目中创建一个Infrastructure 文件夹，在该文件夹添加一个CustomPasswordValidator类，代码如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">namespace DemoUser.Infrastructure</span><br><span class="line">&#123;</span><br><span class="line">    public class CustomPasswordValidator : PasswordValidator&lt;AppUser&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        public override async Task&lt;IdentityResult&gt; ValidateAsync(</span><br><span class="line">            UserManager&lt;AppUser&gt; manager, AppUser user, string password)</span><br><span class="line">        &#123;</span><br><span class="line">            IdentityResult result = await base.ValidateAsync(manager,</span><br><span class="line">                user, password);</span><br><span class="line">            List&lt;IdentityError&gt; errors = result.Succeeded ? new List&lt;IdentityError&gt;() : result.Errors.ToList();</span><br><span class="line"></span><br><span class="line">            if (password.Contains(&quot;china&quot;))</span><br><span class="line">            &#123;</span><br><span class="line">                errors.Add(new IdentityError</span><br><span class="line">                &#123;</span><br><span class="line">                    Code = &quot;PasswordContainsillegalletter&quot;,</span><br><span class="line">                    Description = &quot;Password cannot contain china&quot;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            return errors.Count == 0</span><br><span class="line">                ? IdentityResult.Success</span><br><span class="line">                : IdentityResult.Failed(errors.ToArray());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>2.再次我们需要在startup类里面把我们自定义的密码验证类依赖注入到应用中，代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">public void ConfigureServices(IServiceCollection services)</span><br><span class="line">        &#123;</span><br><span class="line">            //注入自定义密码验证类</span><br><span class="line">            services.AddTransient&lt;IPasswordValidator&lt;AppUser&gt;,</span><br><span class="line">                CustomPasswordValidator&gt;();</span><br><span class="line">            </span><br><span class="line">            services.AddDbContext&lt;AppIdentityDbContext&gt;(options =&gt;</span><br><span class="line">                options.UseSqlServer(</span><br><span class="line">                    Configuration[&quot;Data:AppStoreIdentity:ConnectionString&quot;]));</span><br><span class="line">            //配置密码强度</span><br><span class="line">            services.AddIdentity&lt;AppUser, IdentityRole&gt;(opts =&gt; &#123;</span><br><span class="line">                    opts.Password.RequiredLength = 6;</span><br><span class="line">                    opts.Password.RequireNonAlphanumeric = false;</span><br><span class="line">                    opts.Password.RequireLowercase = false;</span><br><span class="line">                    opts.Password.RequireUppercase = false;</span><br><span class="line">                    opts.Password.RequireDigit = false;</span><br><span class="line">                &#125;).AddEntityFrameworkStores&lt;AppIdentityDbContext&gt;()</span><br><span class="line">                .AddDefaultTokenProviders();</span><br><span class="line">            services.AddMvc();</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><ul><li>这样我们的自定义的密码验证类就成功替换掉了内置的密码验证类。</li></ul><hr><h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><p>简单介绍了IPasswordValidator的配置和简单自定义，下一篇我打算讲解一下Identity架构的设计，以及我们可以自定义的地方有哪些。<br>代码对应的地址 <a href="https://github.com/bluetianx/AspnetCoreExample">github</a> 对应分支f3</p>]]></content>
      
      <categories>
          
          <category> Asp.net Core </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Asp.net core Identity </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hello World</title>
      <link href="/2018/04/04/hello-world/"/>
      <url>/2018/04/04/hello-world/</url>
      <content type="html"><![CDATA[<h2 id="Welcome-This-is-My-very-first-post"><a href="#Welcome-This-is-My-very-first-post" class="headerlink" title="Welcome ! This is My very first post."></a>Welcome ! This is My very first post.</h2><h3 id="你好，晓青！与君初相识，犹如故人归"><a href="#你好，晓青！与君初相识，犹如故人归" class="headerlink" title="你好，晓青！与君初相识，犹如故人归"></a>你好，晓青！与君初相识，犹如故人归</h3>]]></content>
      
      
    </entry>
    
  
  
</search>
